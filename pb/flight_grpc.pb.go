// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FPTFlightClient is the client API for FPTFlight service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FPTFlightClient interface {
	CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error)
	FindFlight(ctx context.Context, in *FindFlightRequest, opts ...grpc.CallOption) (*Flight, error)
	SearchFlight(ctx context.Context, in *SearchFlightRequest, opts ...grpc.CallOption) (*SearchFlightResponse, error)
}

type fPTFlightClient struct {
	cc grpc.ClientConnInterface
}

func NewFPTFlightClient(cc grpc.ClientConnInterface) FPTFlightClient {
	return &fPTFlightClient{cc}
}

func (c *fPTFlightClient) CreateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/training.FPTFlight/CreateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fPTFlightClient) UpdateFlight(ctx context.Context, in *Flight, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/training.FPTFlight/UpdateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fPTFlightClient) FindFlight(ctx context.Context, in *FindFlightRequest, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/training.FPTFlight/FindFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fPTFlightClient) SearchFlight(ctx context.Context, in *SearchFlightRequest, opts ...grpc.CallOption) (*SearchFlightResponse, error) {
	out := new(SearchFlightResponse)
	err := c.cc.Invoke(ctx, "/training.FPTFlight/SearchFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FPTFlightServer is the server API for FPTFlight service.
// All implementations must embed UnimplementedFPTFlightServer
// for forward compatibility
type FPTFlightServer interface {
	CreateFlight(context.Context, *Flight) (*Flight, error)
	UpdateFlight(context.Context, *Flight) (*Flight, error)
	FindFlight(context.Context, *FindFlightRequest) (*Flight, error)
	SearchFlight(context.Context, *SearchFlightRequest) (*SearchFlightResponse, error)
	mustEmbedUnimplementedFPTFlightServer()
}

// UnimplementedFPTFlightServer must be embedded to have forward compatible implementations.
type UnimplementedFPTFlightServer struct {
}

func (UnimplementedFPTFlightServer) CreateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlight not implemented")
}
func (UnimplementedFPTFlightServer) UpdateFlight(context.Context, *Flight) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlight not implemented")
}
func (UnimplementedFPTFlightServer) FindFlight(context.Context, *FindFlightRequest) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindFlight not implemented")
}
func (UnimplementedFPTFlightServer) SearchFlight(context.Context, *SearchFlightRequest) (*SearchFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFlight not implemented")
}
func (UnimplementedFPTFlightServer) mustEmbedUnimplementedFPTFlightServer() {}

// UnsafeFPTFlightServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FPTFlightServer will
// result in compilation errors.
type UnsafeFPTFlightServer interface {
	mustEmbedUnimplementedFPTFlightServer()
}

func RegisterFPTFlightServer(s grpc.ServiceRegistrar, srv FPTFlightServer) {
	s.RegisterService(&FPTFlight_ServiceDesc, srv)
}

func _FPTFlight_CreateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTFlightServer).CreateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTFlight/CreateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTFlightServer).CreateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _FPTFlight_UpdateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTFlightServer).UpdateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTFlight/UpdateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTFlightServer).UpdateFlight(ctx, req.(*Flight))
	}
	return interceptor(ctx, in, info, handler)
}

func _FPTFlight_FindFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTFlightServer).FindFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTFlight/FindFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTFlightServer).FindFlight(ctx, req.(*FindFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FPTFlight_SearchFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTFlightServer).SearchFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTFlight/SearchFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTFlightServer).SearchFlight(ctx, req.(*SearchFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FPTFlight_ServiceDesc is the grpc.ServiceDesc for FPTFlight service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FPTFlight_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.FPTFlight",
	HandlerType: (*FPTFlightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFlight",
			Handler:    _FPTFlight_CreateFlight_Handler,
		},
		{
			MethodName: "UpdateFlight",
			Handler:    _FPTFlight_UpdateFlight_Handler,
		},
		{
			MethodName: "FindFlight",
			Handler:    _FPTFlight_FindFlight_Handler,
		},
		{
			MethodName: "SearchFlight",
			Handler:    _FPTFlight_SearchFlight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flight.proto",
}
