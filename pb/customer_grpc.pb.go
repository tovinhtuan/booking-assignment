// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FPTCustomerClient is the client API for FPTCustomer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FPTCustomerClient interface {
	CreateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	UpdateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	ChangePassword(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	FindCustomer(ctx context.Context, in *FindCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	BookingHistory(ctx context.Context, in *BookingHistoryRequest, opts ...grpc.CallOption) (*ViewBookingByIDResponse, error)
}

type fPTCustomerClient struct {
	cc grpc.ClientConnInterface
}

func NewFPTCustomerClient(cc grpc.ClientConnInterface) FPTCustomerClient {
	return &fPTCustomerClient{cc}
}

func (c *fPTCustomerClient) CreateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/training.FPTCustomer/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fPTCustomerClient) UpdateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/training.FPTCustomer/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fPTCustomerClient) ChangePassword(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/training.FPTCustomer/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fPTCustomerClient) FindCustomer(ctx context.Context, in *FindCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/training.FPTCustomer/FindCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fPTCustomerClient) BookingHistory(ctx context.Context, in *BookingHistoryRequest, opts ...grpc.CallOption) (*ViewBookingByIDResponse, error) {
	out := new(ViewBookingByIDResponse)
	err := c.cc.Invoke(ctx, "/training.FPTCustomer/BookingHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FPTCustomerServer is the server API for FPTCustomer service.
// All implementations must embed UnimplementedFPTCustomerServer
// for forward compatibility
type FPTCustomerServer interface {
	CreateCustomer(context.Context, *Customer) (*Customer, error)
	UpdateCustomer(context.Context, *Customer) (*Customer, error)
	ChangePassword(context.Context, *Customer) (*Customer, error)
	FindCustomer(context.Context, *FindCustomerRequest) (*Customer, error)
	BookingHistory(context.Context, *BookingHistoryRequest) (*ViewBookingByIDResponse, error)
	mustEmbedUnimplementedFPTCustomerServer()
}

// UnimplementedFPTCustomerServer must be embedded to have forward compatible implementations.
type UnimplementedFPTCustomerServer struct {
}

func (UnimplementedFPTCustomerServer) CreateCustomer(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedFPTCustomerServer) UpdateCustomer(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedFPTCustomerServer) ChangePassword(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedFPTCustomerServer) FindCustomer(context.Context, *FindCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCustomer not implemented")
}
func (UnimplementedFPTCustomerServer) BookingHistory(context.Context, *BookingHistoryRequest) (*ViewBookingByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingHistory not implemented")
}
func (UnimplementedFPTCustomerServer) mustEmbedUnimplementedFPTCustomerServer() {}

// UnsafeFPTCustomerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FPTCustomerServer will
// result in compilation errors.
type UnsafeFPTCustomerServer interface {
	mustEmbedUnimplementedFPTCustomerServer()
}

func RegisterFPTCustomerServer(s grpc.ServiceRegistrar, srv FPTCustomerServer) {
	s.RegisterService(&FPTCustomer_ServiceDesc, srv)
}

func _FPTCustomer_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTCustomerServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTCustomer/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTCustomerServer).CreateCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _FPTCustomer_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTCustomerServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTCustomer/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTCustomerServer).UpdateCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _FPTCustomer_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTCustomerServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTCustomer/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTCustomerServer).ChangePassword(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _FPTCustomer_FindCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTCustomerServer).FindCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTCustomer/FindCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTCustomerServer).FindCustomer(ctx, req.(*FindCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FPTCustomer_BookingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FPTCustomerServer).BookingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training.FPTCustomer/BookingHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FPTCustomerServer).BookingHistory(ctx, req.(*BookingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FPTCustomer_ServiceDesc is the grpc.ServiceDesc for FPTCustomer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FPTCustomer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.FPTCustomer",
	HandlerType: (*FPTCustomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _FPTCustomer_CreateCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _FPTCustomer_UpdateCustomer_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _FPTCustomer_ChangePassword_Handler,
		},
		{
			MethodName: "FindCustomer",
			Handler:    _FPTCustomer_FindCustomer_Handler,
		},
		{
			MethodName: "BookingHistory",
			Handler:    _FPTCustomer_BookingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}
